<?php

/**
 * @file
 * Code for the Mica Datasets feature.
 */

include_once('mica_datasets.features.inc');
include_once('mica_datasets.devel.inc');
include_once('mica_datasets.menu.inc');
include_once('mica_datasets.views_bulk_operations.inc');

define('PRIVATE_KEY_FILE', 'private://mica-privatekey.pem');

define('PUBLIC_KEY_FILE', 'private://mica-publickey.pem');

define('MICA_HARMONIZATION_IMPOSSIBLE', base_path() . drupal_get_path('module', 'mica_datasets') . '/images/bullet_red.png');
define('MICA_HARMONIZATION_COMPLETE', base_path() . drupal_get_path('module', 'mica_datasets') . '/images/bullet_green.png');
define('MICA_HARMONIZATION_FORBIDDEN', base_path() . drupal_get_path('module', 'mica_datasets') . '/images/bullet_white.png');
define('MICA_HARMONIZATION_UNDETERMINED', base_path() . drupal_get_path('module', 'mica_datasets') . '/images/bullet_black.png');
define('MICA_HARMONIZATION_MISING_TICK', base_path() . drupal_get_path('module', 'mica_datasets') . '/images/tick.png');

/**
 * Creates default content after Features successfully installed
 * Implements hook_features_rebuild_completed()
 */
function mica_datasets_features_rebuild_completed() {
  if (!variable_get('mica_datasets_features_rebuild_completed', FALSE)) {
    _mica_datasets_create_default_content();
    _mica_datasets_configure_permissions();
    variable_set('mica_datasets_features_rebuild_completed', TRUE);
  }
}

function _mica_datasets_create_default_content() {
  $page = mica_core_add_page(
    st("Datasets"),
    st(
      "The consortium makes study-specific datasets and harmonized datasets available to the research community. Each dataset is described by a comprehensive data dictionary which gives details on each available variable.<br/>Moreover, Mica includes for  studies using the OBiBa Opal software as main database solution, a distributed query engine that enables researchers to obtain real-time aggregated reports on the exact number of participant with specific characteristics or phenotypes. Mica makes even possible to run remotely some regression analyses on the real study data using the DataSHIELD method (Wolfson M et al. <i>Int J Epidemiol</i>. 2010) which is implemented both in Mica and Opal. More information on the OBiBa suite of software is available at <a href=\"http://www.obiba.org\">www.obiba.org.</a><br/><br/>"
    ),
    "datasets"
  );
  $datasets_path = 'node/' . $page->nid;
  $resource_menu = mica_core_find_menu_for_alias('resources');
  $dataset_menu = mica_core_create_node_menu($page, FALSE, TRUE, 0, $resource_menu->link_path);
  mica_core_create_menu(st('Study Datasets'), 'study-datasets', 'study-datasets', FALSE, FALSE, 1, $datasets_path);
  mica_core_create_menu(st('Harmonization Datasets'), 'harmonization-datasets', 'harmonization-datasets', FALSE, FALSE, 2, $datasets_path);
  mica_core_create_menu(st('Variables Search'), 'variable-search', 'variable-search', FALSE, FALSE, 3, $datasets_path);

  // Set menu parent option for dataset
  mica_core_set_menu_option('dataset', $dataset_menu['mlid']);
}

function _mica_datasets_configure_permissions() {
  watchdog('mica', 'Configure Datasets custom permissions', array(), WATCHDOG_DEBUG);
  mica_core_configure_role_permissions('dataset reviewer',
    array(
      'menu view unpublished' => TRUE,
    )
  );
  mica_core_configure_role_permissions('dataset administrator',
    array(
      'menu view unpublished' => TRUE,
    )
  );
}

/**
 * Implements hook_theme().
 */
function mica_datasets_theme() {
  return array(
    'mica_datasets_reorder_variables' => array(
      'render element' => 'form',
      'file' => 'mica_datasets.pages.variables.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mica_datasets_menu() {

  $items = array();
  $items['node/%node/datasets'] = array(
    'title' => 'Edit Datasets',
    'access callback' => '_mica_datasets_node_access',
    'access arguments' => array(1, 'study', 'update'),
    'page callback' => 'mica_datasets_study_datasets_edit_page',
    'page arguments' => array(1),
    'weight' => 5,
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mica_datasets.pages.inc',
  );

  $items['node/%node/studies'] = array(
    'title' => 'Edit Studies',
    'access callback' => '_mica_datasets_node_access',
    'access arguments' => array(1, 'dataset', 'update'),
    'page callback' => 'mica_datasets_dataset_studies_edit_page',
    'page arguments' => array(1),
    'weight' => -1,
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mica_datasets.pages.inc',
  );

  $items['node/%node/reordervariables'] = array(
    'title' => t('Reorder Variables'),
    'description' => t('Reorder Variables within their Dataset.'),
    'access callback' => '_mica_datasets_node_access',
    'access arguments' => array(1, 'dataset', 'update'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mica_datasets_reorder_variables', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mica_datasets.pages.variables.inc',
  );

  $items['mica/ajax/dataset/%node/%node/edit'] = array(
    'title' => 'Dataset Connection Edit',
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'access callback' => '_mica_datasets_node_access',
    'access arguments' => array(4, 'study', 'update'),
    'page callback' => 'mica_dataset_edit_ajax_form_callback',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'file' => 'mica_datasets.pages.inc',
  );

  $items['node/%node/dataset-harmonization'] = array(
    'title' => 'Harmonization',
    'description' => 'View the list of harmonized variables',
    'page callback' => 'mica_datasets_dataset_harmonization_page',
    'page arguments' => array(1),
    'access callback' => '_mica_datasets_node_access',
    'access arguments' => array(1, 'dataset', 'view'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mica_datasets.pages.harmonization.inc',
  );

  // Mica administration
  $items['admin/config/system/mica'] = array(
    'title' => 'Mica',
    'description' => 'Manage Mica Unit.',
    'access callback' => 'user_access',
    'access arguments' => array(0),
    'page callback' => 'mica_datasets_unit_certificate_page',
    'page arguments' => array(0),
    'file' => 'mica_datasets.pages.unit.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/system/mica/configure'] = array(
    'title' => 'Configure key pair',
    'access callback' => 'user_access',
    'access arguments' => array(0),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mica_datasets_unit_form'),
    'file' => 'mica_datasets.pages.unit.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // Mica datasets taxonomy imports/delete
  $items['admin/config/development/mica_datasets'] = array(
    'title' => 'Mica Datasets',
    'description' => 'development tools for Mica Datasets',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mica_datasets_devel_form'),
    'access arguments' => array('administer site configuration'),
  );

  $items['mica_datasets_harmonization/nojs/%'] = array(
    'page callback' => 'mica_datasets_import_variables_callback',
    'page arguments' => array(1, 2),
    'access callback' => '_mica_datasets_node_access',
    'access arguments' => array(2, 'dataset', 'update'),
    'type' => MENU_CALLBACK,
  );

  $items['mica_datasets_harmonization/ajax/%/%'] = array(
    'page callback' => 'mica_datasets_import_variables_callback',
    'page arguments' => array(1, 2, 3),
    'access callback' => '_mica_datasets_node_access',
    'access arguments' => array(2, 'dataset', 'update'),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  $items['variables/autocomplete/%'] = array(
    'access callback' => TRUE,
    'page callback' => 'mica_datasets_variables_autocomplete',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'mica_datasets.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function mica_datasets_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  $links = array();
  switch ($root_path) {

    case 'study-datasets':
    case 'harmonization-datasets':
      if (node_access('create', 'dataset')) {
        $links['add-dataset'] = array(
          '#theme' => 'menu_local_action',
          '#link' => array(
            'title' => t('Add a Dataset'),
            'href' => 'node/add/dataset',
            'localized_options' => array(
              'query' => array(
                'type' => 'dataset'
              )
            )
          ),
        );
      }
      break;

    case 'node/%/reordervariables':
      $node = $router_item['page_arguments'][1];
      if ($node != NULL && $node->type === 'dataset') {
        if (node_access('update', $node)) {
          // add variables
          $links['add-variable'] = array(
            '#theme' => 'menu_local_action',
            '#weight' => 7,
            '#link' => array(
              'title' => t('Add new variable'),
              'href' => 'node/add/variable',
              'localized_options' => array(
                'query' => array(
                  'dataset' => $node->nid
                )
              )
            ),
          );
        }
      }
      break;

    case 'node/%':
      $node = $router_item['page_arguments'][0];
      if ($node != NULL && $node->type === 'dataset') {
        if (node_access('update', $node)) {
          // set variable dimensions
          $links['variable-dimensions'] = array(
            '#theme' => 'menu_local_action',
            '#weight' => 45,
            '#link' => array(
              'title' => t('Add dimensions'),
              'href' => 'variables-dimensions/' . $node->nid,
              'localized_options' => array(
                'query' => array(
                  'dataset' => $node->nid
                )
              )
            ),
          );

          // add variables
          $links['add-variable'] = array(
            '#theme' => 'menu_local_action',
            '#weight' => 50,
            '#link' => array(
              'title' => t('Add new variable'),
              'href' => 'node/add/variable',
              'localized_options' => array(
                'query' => array(
                  'dataset' => $node->nid
                )
              )
            ),
          );

          // If at least one study as a connection to Opal
          $dataset_wrapper = entity_metadata_wrapper('node', $node);
          foreach ($dataset_wrapper->field_dataset_studies->value() as $study) {
            if (mica_connector_query($dataset_wrapper->nid->value(), $study->nid, 1)) {
              // import variables
              $links['import-variables'] = array(
                '#theme' => 'menu_local_action',
                '#weight' => 40,
                '#link' => array(
                  'title' => t('Import Variables'),
                  'href' => 'mica_datasets_harmonization/nojs/' . $node->nid,
                )
              );
              break;
            }
          }
        }

        if (node_access('view', $node)) {
          // highlight queries and harmonization
          foreach ($data['actions']['output'] as $key => $link) {
            if (isset($link['#link']['path']) && $link['#link']['path'] == 'node/%/queries') {
              $data['actions']['output'][$key]['#link']['localized_options'] = array(
                'attributes' => array('class' => 'highlight')
              );
              $data['actions']['output'][$key]['#weight'] = 40;
            }

            if (isset($link['#link']['path']) && $link['#link']['path'] == 'node/%/dataset-harmonization') {

              //Hide Harmonization button when its a study dataset
              $dataset_wrapper = entity_metadata_wrapper('node', $node);

              if ($dataset_wrapper->field_dataset_type->value() === 'study') {
                $data['actions']['output'][$key]['#access'] = FALSE;
              }
              else {
                $data['actions']['output'][$key]['#link']['localized_options'] = array(
                  'attributes' => array('class' => 'highlight')
                );
                $data['actions']['output'][$key]['#weight'] = 42;
              }
            }
          }

          // variables
          $links['view-variable'] = array(
            '#weight' => 30,
            '#theme' => 'menu_local_action',
            '#link' => array(
              'title' => t('Variables'),
              'href' => 'variable-search',
              'localized_options' => array(
                'query' => array(
                  'f[0]' => 'field_dataset:' . $node->nid
                ),
                'attributes' => array(
                  'class' => 'highlight',
                ),
              ),
            ),
          );
        }
      }
      break;

    case 'node/%/dataset-harmonization':
      $node = $router_item['page_arguments'][0];
      if ($node != NULL && $node->type === 'dataset') {
        if (node_access('update', $node)) {
          // add variables
          $links['add-variable'] = array(
            '#theme' => 'menu_local_action',
            '#weight' => 7,
            '#link' => array(
              'title' => t('Add new variable'),
              'href' => 'node/add/variable',
              'localized_options' => array(
                'query' => array(
                  'dataset' => $node->nid
                )
              )
            ),
          );

          // Edit studies
          $item = menu_get_item("node/$node->nid/studies");
          if ($item['access']) {
            $data['actions']['output'][] = array(
              '#theme' => 'menu_local_action',
              '#link' => $item,
            );
          }
        }
      }
      break;
  }

  $data['actions']['output'] = array_merge($data['actions']['output'], $links);
}


/**
 * Check node type (if provided) and node access.
 *
 * @param node   $node
 * @param string $bundle
 * @param string $op
 */
function _mica_datasets_node_access($node, $bundle = NULL, $op = 'update') {
  if (!is_object($node)) {
    $node = node_load($node);
  }
  // Make sure the user can view the original node content.
  if ($bundle != NULL) {
    return $node->type === $bundle && node_access($op, $node);
  }
  else {
    return node_access($op, $node);
  }
}

/**
 * Implements hook_form().
 */
function mica_datasets_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_field_attach_form()
 */
function mica_datasets_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // do not display manual edition of study view reference field
  if ($entity_type === 'node') {
    switch ($entity->type) {
      case 'dataset';
        $form['field_dataset_studies']['#attributes']['style'] = array('display:none;');
        $form['field_dataset_variables']['#attributes']['style'] = array('display:none;');
        break;
      case 'study':
        $form['field_study_study_variable_att']['#attributes']['style'] = array('display:none;');
        break;
      case 'variable':
        $form['field_variable_study_var_att']['#attributes']['style'] = array('display:none;');
        break;
      case 'study_variable_attributes':
        $form['field_sva_variable']['#attributes']['style'] = array('display:none;');
        $form['field_sva_study']['#attributes']['style'] = array('display:none;');
        break;
    }
  }
}

/**
 * Load all node of type 'variable' associated with a dataset
 *
 * @param $dataset nid
 */
//TODO maybe use wrapper and dataset->field_dataset_variables field instead of query...
function mica_dataset_dataset_variables($dataset, $sorted = FALSE) {
  // Get field information
  $field = field_info_field('field_dataset');
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'variable')
    ->fieldCondition($field, 'nid', $dataset);

  $entities = $query->execute();
  $variables = (empty($entities) ? array() : node_load_multiple(array_keys($entities['node'])));

  if ($sorted){
    uasort($variables, 'mica_datasets_sort_by_title');
  }

  return $variables;
}

function mica_dataset_private_file_absolute_path($reference) {
  if (file_valid_uri($reference)) {
    $wrapper = file_stream_wrapper_get_instance_by_uri($reference);
    if ($wrapper) {
      return $wrapper->realpath();
    }
  }
  return $reference;
}

function mica_datasets_prepare_prettify() {

  static $paths = array();

  if (empty($paths) || !isset($paths['css']) || !isset($paths['js'])) {

    // If Libraries API is installed, we first use that to try and find the library.
    // Otherwise we manually check a few locations.
    $search_dirs = array();
    if (function_exists('libraries_get_path')) {
      $dir = libraries_get_path('prettify');
      // Confusingly, Libraries API 1.x will return sites/all/libraries/NAME on failure,
      // while Libraries API 2.x returns FALSE in that case.
      if ($dir) {
        $search_dirs[] = $dir;
      }
    }
    else {
      // Include libraries + current profile folders in searched directories.
      $search_dirs[] = 'sites/all/libraries/prettify';
      $search_dirs[] = 'profiles/' . drupal_get_profile() . '/libraries/prettify';
    }
    $search_dirs[] = drupal_get_path('module', 'mica_datasets') . '/includes';
    foreach ($search_dirs as $dir) {
      if (file_exists($dir . '/prettify.css') && file_exists($dir . '/prettify.js')) {
        $paths['css'] = $dir . '/prettify.css';
        $paths['js'] = $dir . '/prettify.js';
        break;
      }
    }
  }

  if (isset($paths['css'])) {
    drupal_add_css($paths['css']);
  }
  else {
    throw new Exception('prettify.css library not found! Please follow the instructions in mica_datasets/README.txt');
  }

  if (isset($paths['js'])) {
    drupal_add_js($paths['js']);
  }
  else {
    throw new Exception('prettify.js library not found! Please follow the instructions in mica_datasets/README.txt');
  }

  ctools_add_js('mica_datasets_prettify', 'mica_datasets');
}

/**
 * Implements hook_node_view_alter().
 */
function mica_datasets_node_view_alter(&$build) {
  if ($build['#view_mode'] === 'right_area' && $build['#bundle'] === 'variable') {
    $variable_node = $build['#node'];
    $variable_wrapper = entity_metadata_wrapper('node', $variable_node);
    $dataset = $variable_wrapper->field_dataset->value();
    if (!empty($dataset)) {
      $values = array();
      $values['variable_id'] = $variable_node->nid;
      $values['dataset_id'] = $variable_wrapper->field_dataset->nid->value();
      $term = new MicaDatasetQueryTerm($values);
      $impl = $term->termImpl();
      if ($impl->hasConnectors()) {
        $build['statistics'] = array(
          '#type' => 'fieldset',
          '#title' => t('Statistics'),
          '#weight' => 50,
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          'table' => array(
            '#markup' => $impl->view(),
          ),
        );
      }
    }
  }
  if ($build['#view_mode'] === 'footer_area' && $build['#bundle'] === 'variable') {
    $variable_node = $build['#node'];
    $variable_wrapper = entity_metadata_wrapper('node', $variable_node);
    $dataset = $variable_wrapper->field_dataset->value();
    if (!empty($dataset)) {

      $dataset = entity_load_single('node', $dataset->nid);
      $dataset_wrapper = entity_metadata_wrapper('node', entity_load_single('node', $dataset->nid));

      if ($dataset_wrapper->field_dataset_type->value() !== 'study') {

        require_once('mica_datasets.pages.harmonization.inc');

        mica_datasets_prepare_prettify();

        $header = array(
          'study' => t('Study'),
          'status' => t('Status'),
          'comment' => t('Comment'),
          'script' => t('Script'),
        );
        $options = array();
        $status_values = field_info_field('field_sva_status');

        $sva_query = new EntityFieldQuery();
        $sva_results = $sva_query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'study_variable_attributes')
          ->fieldCondition('field_sva_variable', 'nid', $variable_node->nid)
          ->execute();
        $svas = empty($sva_results['node']) ? array() : node_load_multiple(array_keys($sva_results['node']));
        foreach ($svas as $study_variable_attributes) {
          $sva_wrapper = entity_metadata_wrapper('node', $study_variable_attributes);
          // comment is not showing in the right language
          if (function_exists('i18n_language')) {
            $sva_wrapper->language->set(i18n_language()->language);
          }
          $study_wrapper = entity_metadata_wrapper('node', $sva_wrapper->field_sva_study->value()->nid);
          if ($study_wrapper->access('view')) {

            $script = $sva_wrapper->field_sva_script->value() ? $sva_wrapper->field_sva_script->value() : '';
            $script = _mica_datasets_toHtmlTruncate(
              $script, t('script'), 200, TRUE
            );

            $comment = $sva_wrapper->field_sva_comment->value() ? $sva_wrapper->field_sva_comment->value() : '';
            $comment = _mica_datasets_toHtmlTruncate($comment, t('comment'), 200, FALSE);

            if ($sva_wrapper->access('view') == FALSE) {
              $status = 'forbidden';
              $status_label = t('Access Denied');
              $script = NULL;
              $comment = NULL;
            }
            elseif (!empty($study_variable_attributes->field_sva_status)) {
              $status = $sva_wrapper->field_sva_status->value();
              $status_label = $status_values['settings']['allowed_values'][$status];
            }
            else {
              $status = 'undetermined';
              $status_label = t('Undetermined');
              $script = NULL;
            }

            $name = $study_wrapper->field_acroym->value() ? $study_wrapper->field_acroym->value() : $study_wrapper->title->value();
            $status = "<img src=\"" . _mica_datasets_get_status_icon($status) . "\" title=\"$status_label\"></div>";

            $option = array(
              'study' => $name,
              'status' => $status,
              'comment' => truncate_utf8($comment, 100, FALSE, TRUE),
              'script' => $script,
            );

            if ($sva_wrapper->access('view')) {
              $header['view'] = '';
              $option['view'] = "<a href='" . url('node/' . $sva_wrapper->nid->value()) . "'>" . t('View') . "</a>";
            }

            $options[] = $option;
          }
        }

        $elements = drupal_get_form('mica_datasets_harmonization_legend_form');

        $build['harmonization'] = array(
          '#type' => 'fieldset',
          '#title' => t('Harmonization'),
          '#weight' => 50,
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          'legend' => array(
            '#markup' => drupal_render($elements),
          ),
          'table' => array(
            '#markup' => theme(
              'table', array('header' => $header, 'rows' => $options, 'empty' => t('No harmonization found'))
            ),
          ),
          'overview' => array(
            '#markup' => "<p><a href='" . url("node/$dataset->nid/dataset-harmonization") . "'><b>" . t(
              "View @title Harmonization", array('@title' => $dataset->title)
            ) . "</a></b></p>",
          ),
        );
      }
    }
  }
}

/**
 * Implements hook_node_presave()
 */
function mica_datasets_node_presave($node) {
  switch ($node->type) {
    case 'variable':
      _mica_datasets_set_variable_position($node);
      break;
    case 'dataset':
      $dataset = entity_metadata_wrapper('node', $node);
      if ($dataset->field_dataset_type->value() === 'harmonization') {
        foreach ($dataset->field_dataset_studies as $study) {
          _mica_datasets_create_svas($study->value(), $dataset->value());
        }
      }
      else {
        foreach ($dataset->field_dataset_studies as $study) {
          _mica_datasets_delete_svas($dataset->value(), $study->value());
        }
      }
      break;
  }
}

/**
 * Implements hook_node_insert()
 */
function mica_datasets_node_insert($node) {
  switch ($node->type) {
    case 'dataset':
      _mica_datasets_create_dataset_menu($node);
      break;

    case 'variable':
      _mica_datasets_add_study_variable_attributes_to($node);
      _mica_datasets_create_variable_menu($node);
      break;
  }
}

/**
 * Implements hook_node_delete()
 */
function mica_datasets_node_delete($node) {
  switch ($node->type) {
    case 'dataset':

      $dataset_id = $node->nid;

      // remove queries and their terms
      $queries = MicaDatasetQueryManager::getPersistedQueries($dataset_id);
      if (!empty($queries)) {
        foreach ($queries as $query) {
          $query_id = $query->id;
          $terms = mica_query_term_query($query_id);
          if (!empty($terms)) {
            foreach ($terms as $term) {
              entity_delete('mica_dataset_query_term', $term->id);
            }
          }
          entity_delete('mica_dataset_query', $query_id);
        }
      }

      // flush cached queries
      MicaDatasetQueryManager::deleteQueries($dataset_id);

      // remove variables
      $dataset = entity_metadata_wrapper('node', $dataset_id);
      $variables = $dataset->field_dataset_variables;
      $variables_value = $variables->value();
      if (!empty($variables_value)) {
        foreach ($variables as $variable) {
          $variable->delete();
        }
      }

      // remove reference from studies
      $query = new EntityFieldQuery();
      $entities = $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'study')
        ->fieldCondition('mica_dataset', 'nid', $dataset_id)
        ->execute();

      if (!empty($entities)) {

        $studies = node_load_multiple(array_keys($entities['node']));

        foreach ($studies as $study_node) {

          foreach ($study_node->mica_dataset[$study_node->language] as $key => $value) {
            if ($value['nid'] == $dataset_id) {
              unset($study_node->mica_dataset[$study_node->language][$key]);

              $connector = mica_connector_query($dataset_id, $study_node->nid);
              if ($connector) {
                $connector->delete();
              }
              break;
            }
          }
          node_save($study_node);
        }
      }
      break;

    case 'study':

      $sva_query = new EntityFieldQuery();
      $sva_results = $sva_query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'study_variable_attributes')
        ->fieldCondition('field_sva_study', 'nid', $node->nid)
        ->execute();
      if (!empty($sva_results['node'])) {
        foreach (node_load_multiple(array_keys($sva_results['node'])) as $sva) {
          $sva_wrapper = entity_metadata_wrapper('node', $sva);
          if ($sva_wrapper->field_sva_variable->value() !== NULL) {
            $variable_wrapper = entity_metadata_wrapper('node', $sva_wrapper->field_sva_variable->value());
            _mica_datasets_remove_and_save_element_from_entity_list_wrapper($variable_wrapper, $sva_wrapper, 'field_variable_study_var_att');
            $sva_wrapper->delete();
          }
        }
      }

      $study_wrapper = entity_metadata_wrapper('node', $node);
      foreach ($study_wrapper->mica_dataset as $dataset) {
        _mica_datasets_remove_and_save_element_from_entity_list_wrapper($dataset, $study_wrapper, 'field_dataset_studies');
      }
      break;

    case 'variable':
      $variable = entity_metadata_wrapper('node', $node);

      $query = new EntityFieldQuery();
      $results = $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'study_variable_attributes')
        ->fieldCondition('field_sva_variable', 'nid', $variable->nid->value())
        ->execute();

      if (!empty($results)) {
        foreach ($results['node'] as $result) {
          $sva = node_load($result->nid);
          $sva_wrapper = entity_metadata_wrapper('node', $sva);
          if (empty($sva->field_sva_study) == FALSE) {
            _mica_datasets_remove_and_save_element_from_entity_list_wrapper($sva_wrapper->field_sva_study, $sva_wrapper, 'field_study_study_variable_att');
            $sva_wrapper->delete();
          }
        }
      }
      _mica_datasets_remove_and_save_element_from_entity_list_wrapper($variable->field_dataset, $variable, 'field_dataset_variables');
      break;

    case 'study_variable_attributes':
      $sva = entity_metadata_wrapper('node', $node);
      $field_sva_variable_value = $sva->field_sva_variable->value();
      if (!empty($field_sva_variable_value)) {
        _mica_datasets_remove_and_save_element_from_entity_list_wrapper($sva->field_sva_variable, $sva, 'field_variable_study_var_att');
      }
      $field_sva_study_value = $sva->field_sva_study->value();
      if (!empty($field_sva_study_value)) {
        _mica_datasets_remove_and_save_element_from_entity_list_wrapper($sva->field_sva_study, $sva, 'field_study_study_variable_att');
      }
      break;
  }
}

/**
 * @param $study
 * @param $dataset
 *
 * For all variable in $dataset,link them to $study with Study Variables entity
 */
function _mica_datasets_create_svas(&$study, &$dataset) {
  $wrapper_study = entity_metadata_wrapper('node', $study);
  $study_value = $wrapper_study->value();
  $wrapper_dataset = entity_metadata_wrapper('node', $dataset);

  if ($wrapper_dataset->field_dataset_type->value() === 'harmonization') {
    $query = new EntityFieldQuery();
    $results = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'study_variable_attributes')
      ->fieldCondition('field_sva_study', 'nid', $wrapper_study->nid->value())
      ->execute();

    $study_variable_attributes = array();
    if (empty($results['node']) == FALSE) {
      $study_variable_attributes = entity_load('node', array_keys($results['node']));
    }

    $variables = array();
    foreach ($wrapper_dataset->field_dataset_variables as $wrapper_variable) {
      $exist = FALSE;
      $variable_value = $wrapper_variable->value();
      foreach ($study_variable_attributes as $sv) {
        $wrapper_sv = entity_metadata_wrapper('node', $sv);
        $field_sva_variable_value = $wrapper_sv->field_sva_variable->value();
        $field_sva_study_value = $wrapper_sv->field_sva_study->value();
        // this method is called also when deleting a variable and $field_sva_variable_value is null in that case
        if (!is_null($field_sva_variable_value) && $field_sva_variable_value->nid === $variable_value->nid
          && $field_sva_study_value->nid === $study_value->nid
        ) {
          $exist = TRUE;
        }
      }
      if (!$exist) {
        if ($variable_value !== NULL) {
          array_push($variables, $wrapper_variable);
        }
      }
    }

    if (isset($variables)) {
      _mica_datasets_create_study_variable_attributes_for_study($wrapper_study, $variables);
    }
  }
}

function _mica_datasets_delete_svas(&$dataset, &$study) {
  $dataset_wrapper = entity_metadata_wrapper('node', $dataset->nid);
  $study_wrapper = entity_metadata_wrapper('node', $study->nid);
  $variables = $dataset_wrapper->field_dataset_variables;
  foreach ($variables as $variable) {

    $sva_query = new EntityFieldQuery();
    $sva_results = $sva_query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'study_variable_attributes')
      ->fieldCondition('field_sva_variable', 'nid', $variable->nid)
      ->execute();

    if (!empty($sva_results['node'])) {
      foreach (node_load_multiple(array_keys($sva_results['node'])) as $sva) {
        $sva_wrapper = entity_metadata_wrapper('node', $sva);
        if ($sva_wrapper->field_sva_study->nid->value() === $study_wrapper->nid->value()) {
          $sva_wrapper->delete();
          _mica_datasets_remove_and_save_element_from_entity_list_wrapper($variable, $sva_wrapper, 'field_variable_study_var_att');
        }
      }
    }
  }
}

/**
 * Implements hook_node_validate()
 */
function mica_datasets_node_validate($node, $form, &$form_state) {
  // check dataset node title is unique
  if (!isset($node->nid) && $node->type === 'dataset') {
    if (mica_core_node_title_exists($node->type, $node->title)) {
      form_set_error('title', t('Dataset name \'!title\' is already given.', array('!title' => $node->title)));
    }
  }
}

/**
 * Implements hook_block_view_alter()
 */
function mica_datasets_block_view_alter(&$data, $block) {
  if (!empty($block) && $block->delta === 'variable_current_search' && $block->module === 'current_search') {
    _mica_datasets_variable_current_search($data, $block);
  }
}

function _mica_datasets_variable_current_search(&$data, $block) {
  if (isset($data['content']['field_group'])) {
    $data['content']['results']['#markup'] .= ' - ' . l(
      t('Clear all criteria') . ' [X]',
      'variable-search',
      array(
        'attributes' => array(
          'rel' => 'nofollow',
          'class' => array('current-search-clear-all'),
        )
      )
    );

    // Translate titles
    foreach ($data['content']['field_group'] as $field => $field_group) {
      if (isset($data['content']['field_group'][$field]) && isset($data['content']['field_group'][$field]['title']['#markup'])) {
        $text = $data['content']['field_group'][$field]['title']['#markup'];
        $start = strpos($text, '<h4 class="current-search-group-title">');
        $end = strpos($text, '</h4>');
        $length = strlen($text) - 45;
        $title = substr($text, $start + 39, $length);

        $data['content']['field_group'][$field]['title']['#markup'] = '<h4 class="current-search-group-title">'
          . filter_xss(t($title)) . ':</h4>';
      }
    }
  }
}

/**
 * Inspired from prepopulate module
 * Implementation of hook_form_alter().
 */
function mica_datasets_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'variable_node_form':
      _mica_datasets_form_alter_variable($form, $form_state, $form_id);
      break;
    case 'views_form_variables_dimensions_page':
      _mica_datasets_variables_dimensions_set_default($form);
      break;
  }
}

/**
 * Sets the checkbox to add new values to existing values by default TRUE
 */
function _mica_datasets_variables_dimensions_set_default(&$form) {
  if (isset($form['bundle_variable'])) {
    foreach ($form['bundle_variable'] as $field_name => $field) {
      if (strstr($field_name, '_append::')) {
        $form['bundle_variable'][$field_name]['#default_value'] = TRUE;
      }
    }
  }
}


function _mica_datasets_form_alter_variable(&$form, $form_state, $form_id) {
  if (isset($_REQUEST['dataset'])) {
    $lang = $form['field_dataset']['#language'];
    $form['field_dataset'][$lang]['#after_build'][] = '_mica_datasets_prepopulate_variable_after_build';
    // Hide this way to prevent a 'dataset field is required' after adding a category
    $form['field_dataset']['#attributes'] = array('style' => 'display:none');
  }
  // hide field_position
  $form['field_position']['#access'] = FALSE;

  $nid = $form['nid']['#value'];
  if (!empty($nid)) {
    $next_variable = _mica_datasets_find_next_variable($nid);
    if ($next_variable != NULL) {
      $form['actions']['save_edit_next'] = array(
        '#access' => TRUE,
        '#value' => t('Save & edit next'),
        '#weight' => 6,
        '#type' => 'submit',
        '#submit' => array('node_form_submit', '_mica_datasets_save_edit_next_submit'),
        '#next_variable_nid' => $next_variable->nid,
      );
    }
  }
}

function _mica_datasets_prepopulate_variable_after_build(&$form_element) {
  if (isset($_REQUEST['dataset'])) {
    $form_element[0]['nid']['#default_value'] = $_REQUEST['dataset'];
    $form_element[0]['nid']['#value'] = node_reference_autocomplete_value($form_element[0]['nid'], FALSE, NULL);
  }
  return $form_element;
}

function _mica_datasets_save_edit_next_submit($form, &$form_state) {
  if (isset($form['actions']['save_edit_next'])) {
    $form_state['redirect'] = 'node/' . $form['actions']['save_edit_next']['#next_variable_nid'] . '/edit';
  }
}

function _mica_datasets_find_next_variable($variable_nid) {
  $variable = node_load($variable_nid);
  $wrapper = entity_metadata_wrapper('node', $variable);
  $dataset_id = $wrapper->field_dataset->nid->value();

  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'variable')
    ->fieldCondition('field_dataset', 'nid', $dataset_id)
    ->fieldCondition('field_position', 'value', $wrapper->field_position->value(), '>')
    ->fieldOrderBy("field_position", 'value', "asc")
    ->range(0, 1)
    ->execute();
  if (!empty($results['node'])) {
    return array_pop(entity_load('node', array_keys($results['node'])));
  }
  return NULL;
}

function _mica_datasets_set_variable_position(&$variable) {

  $wrapper = entity_metadata_wrapper('node', $variable);
  $position = $wrapper->field_position->value();
  if ($position != NULL && $position != 0) {
    return NULL;
  }

  $dataset_id = $wrapper->field_dataset->nid->value();

  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'variable')
    ->fieldCondition('field_dataset', 'nid', $dataset_id)
    ->fieldOrderBy("field_position", 'value', "desc")
    ->range(0, 1)
    ->execute();
  if (empty($results['node'])) {
    $wrapper->field_position->set(1);
  }
  else {
    $last_variable = array_pop(entity_load('node', array_keys($results['node'])));
    $last_variable_wrapper = entity_metadata_wrapper('node', $last_variable);
    $wrapper->field_position->set($last_variable_wrapper->field_position->value() + 1);
  }
  return $variable;
}

function _mica_datasets_add_study_variable_attributes_to(&$variable) {
  $wrapper_variable = entity_metadata_wrapper('node', $variable);
  $wrapper_dataset = entity_metadata_wrapper('node', $wrapper_variable->field_dataset->nid->value());
  if ($wrapper_dataset->field_dataset_studies->count() !== 0 && $wrapper_dataset->field_dataset_type->value() === 'harmonization') {
    $studies = array();
    foreach ($wrapper_dataset->field_dataset_studies as $wrapper_study) {
      if ($wrapper_study->value() !== NULL) {
        array_push($studies, $wrapper_study);
      }
    }
    _mica_datasets_create_study_variable_attributes_for_variable($wrapper_variable, $studies);
  }
}

function _mica_datasets_create_study_variable_attributes_for_variable(&$variable, $studies) {
  if (!empty($studies)) {
    foreach ($studies as $study) {
      _mica_datasets_create_study_variable_attribute($variable, $study);
      $study->save();
    }
    //do not called ->save(), because drupal will not update $variable but save, then: duplication error
    field_attach_update('variable', $variable);
  }
}

function _mica_datasets_create_study_variable_attributes_for_study(&$study, $variables) {
  if (!empty($variables)) {
    foreach ($variables as $variable) {
      _mica_datasets_create_study_variable_attribute($variable, $study);
      $variable->save();
    }
    $study->save();
  }
}

function _mica_datasets_create_study_variable_attribute(&$wrapper_variable, &$wrapper_study) {
  global $user;
  $infos = array(
    'type' => 'study_variable_attributes',
    'title' => $wrapper_variable->title->value() . ' -- ' . $wrapper_study->title->value(),
    'language' => $wrapper_variable->language->value(),
    'field_sva_study' => $wrapper_study->nid->value(),
    'field_sva_variable' => $wrapper_variable->nid->value(),
    'uid' => $user->uid,
  );
  $new_study_variable_attributes = entity_property_values_create_entity('node', $infos);
  $saved = $new_study_variable_attributes->save();

  _mica_datasets_add_element_in_entity_list_wrapper($wrapper_variable, $saved, 'field_variable_study_var_att');
  _mica_datasets_add_element_in_entity_list_wrapper($wrapper_study, $saved, 'field_study_study_variable_att');
}

function _mica_datasets_add_element_in_entity_list_wrapper(&$entity, &$entity_to_add, $field_name) {
  $nids = array();
  if (isset($entity->$field_name)) {
    foreach ($entity->$field_name->value() as $item) {
      if (isset($item)) {
        array_push($nids, $item->nid);
      }
    }
  }
  array_push($nids, $entity_to_add->nid->value());
  $nids = array_unique($nids);
  $entity->$field_name->set($nids);
}

function _mica_datasets_remove_and_save_element_from_entity_list_wrapper(&$entity_wrapper, &$entity_to_remove_wrapper, $field_name) {
  if ($entity_wrapper->value() !== NULL) {
    foreach ($entity_wrapper->$field_name->value() as $key => $value) {
      if (isset($value)) {
        if ($value->nid === $entity_to_remove_wrapper->nid->value()) {
          $entity_wrapper->$field_name->offsetUnset($key);
          break;
        }
      }
    }
    $entity_wrapper->save();
  }
}

function mica_datasets_node_view($node, $view_mode) {
  if ($node->type === 'study_variable_attributes') {
    // add icon to script status
    $status_values = field_info_field('field_sva_status');
    $status = array_search(
      $node->content['field_sva_status'][0]['#markup'], $status_values['settings']['allowed_values']
    );
    $node->content['field_sva_status'][0]['#prefix']
      = "<div class='harmonization-$status'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
    $node->content['field_sva_status'][0]['#suffix'] = '</div>';

    if (!empty($node->content['field_sva_script'])) {
      $node->content['field_sva_script'][0]['#prefix'] = '<code class=\'prettyprint\'>';
      $node->content['field_sva_script'][0]['#suffix'] = '</code>';
      $node->content['field_sva_script'][0]['#markup'] = check_markup(
        drupal_html_to_text($node->content['field_sva_script'][0]['#markup'])
      );
      mica_datasets_prepare_prettify();
    }
  }
  else {
    if ($node->type === 'variable') {
      // Show moderation state messages if we're on a node page.
      if (node_is_page($node) && $view_mode === 'banner_area' && empty($node->in_preview)) {
        workbench_moderation_messages('view', $node);
      }

      // Replace "Missing" by an icon
      if (!(empty($node->content['field_variable_categories']))
        && !empty($node->content['field_variable_categories']['#object']->field_variable_categories)
      ) {
        foreach ($node->content['field_variable_categories'][0]['#rows'] as &$row) {
          if (!empty($row['missing'])) {
            // replace with div icon
            $row['missing'] = "<div class='variable_category-missing' title='Missing'><img src='" . MICA_HARMONIZATION_MISING_TICK . "'></div>";
          }
        }
      }
    }
  }
}

function _mica_datasets_toHtmlTruncate($text, $label, $size = 200, $is_code = FALSE) {
  $htmlTruncate = '';
  if (!empty($text)) {

    // split to respect line size
    if ($is_code) {
      $htmlTruncate = "<code class=\"prettyprint\">";
      // split at ).
      $lines = explode(").", $text);
      $text = implode(")\n.", $lines);
    }
    else {
      $lines = str_split($text, 60);
      $text = implode("\n", $lines);
    }

    if (strlen($text) > $size) {
      $htmlTruncate .= check_markup(truncate_utf8($text, $size, FALSE));

      if ($is_code) {
        $htmlTruncate .= "</code>";
      }

      $htmlTruncate .= "[" . $label . " " . t("truncated") . "]";
    }
    else {
      $htmlTruncate .= check_markup($text);

      if ($is_code) {
        $htmlTruncate .= "</code>";
      }
    }
  }
  return $htmlTruncate;
}

function _mica_datasets_get_status_icon($status) {

  switch ($status) {
    case 'impossible':
      return MICA_HARMONIZATION_IMPOSSIBLE;

    case 'complete':
      return MICA_HARMONIZATION_COMPLETE;

    case 'forbidden':
      return MICA_HARMONIZATION_FORBIDDEN;

    default:
      return MICA_HARMONIZATION_UNDETERMINED;
  }
}

function mica_datasets_import_variables_callback($type, $dataset_nid, $study_nid = NULL) {
  ctools_include('ajax');
  ctools_add_js('ajax-responder');

  $dataset = entity_load_single('node', $dataset_nid);

  $study_nids = array();
  if (isset($study_nid)) {
    $study_nids = array($study_nid);
  }
  else {
    // fetch all study_nids of the dataset
    $dataset_wrapper = entity_metadata_wrapper('node', $dataset);

    foreach ($dataset_wrapper->field_dataset_studies->value() as $study) {
      $study_nids[] = $study->nid;
    }
  }

  foreach ($study_nids as $nid) {
    $study = entity_load_single('node', $nid);
    $study_wrapper = entity_metadata_wrapper('node', $study);

    $harmonizations = FALSE;
    try {
      $harmonizations = mica_opal_fetch_harmonization_view($dataset_nid, $nid);
    } catch (Exception $e) {
      switch ($e->getCode()) {
        case 404:
          drupal_set_message(
            t('Opal server was not found (error 404) for study %study.',
              array('%study' => $study_wrapper->title->value())),
            'error'
          );
          break;
        default:
          drupal_set_message(
            t('Error while importing variables for study %study: %error',
              array('%study' => $study_wrapper->title->value(), '%error' => $e->getMessage())),
            'error'
          );
      }
    }

    if ($harmonizations) {
      $nb = mica_datasets_create_variables($harmonizations);

      drupal_set_message(
        t(
          '@count variables have been imported for study @study into the dataset @dataset',
          array(
            '@count' => $nb,
            '@study' => $study_wrapper->title->value(),
            '@dataset' => $dataset->title,
          )
        )
      );
    }
  }
  if ($type === 'ajax') {
    $commands[] = ctools_ajax_command_reload();
    return array(
      '#type' => 'ajax',
      '#commands' => $commands
    );
  }
  else {
    drupal_goto('node/' . $dataset_nid);
  }
}

function mica_datasets_create_variables($harmonizations) {
  global $user;
  $position = 1;
  $nb_created = 0;

  $dataset = node_load($harmonizations['dataset_nid']);

  foreach ($harmonizations['variables'] as $harmonization) {

    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'variable')
      ->propertyCondition('title', $harmonization['title'])
      ->fieldCondition('field_dataset', 'nid', $harmonizations['dataset_nid'])
      ->execute();

    $default_language = language_default()->language;

    if (empty($result)) {
      $infos = array(
        'type' => 'variable',
        'title' => $harmonization['title'],
        'title_field' => $harmonization['title'],
        'language' => $dataset->language,
        'uid' => $user->uid,
        'status' => NODE_NOT_PUBLISHED,
        'menu' => '',
        'field_dataset' => $harmonizations['dataset_nid'],
        'field_value_type' => $harmonization['value_type'],
        'field_repeatable' => $harmonization['repeatable'],
        'field_unit' => $harmonization['unit'],
        'field_position' => $position++,
      );
      $wrapper = entity_property_values_create_entity('node', $infos);

      foreach ($harmonization['label'] as $language => $value) {
        $wrapper->language($language)->field_label->set($value);
      }
      foreach ($harmonization['description'] as $language => $value) {
        $wrapper->language($language)->body->value->set($value);
      }

      // Update categories
      $i = 0;
      foreach ($harmonization['categories'] as $category) {
        $wrapper->language($dataset->language)->field_variable_categories[$i]->name->set($category['name']);
        $wrapper->language($dataset->language)->field_variable_categories[$i]->missing->set($category['missing']);
        if (isset($category['label'])) {
          foreach ($category['label'] as $language => $value) {
            $wrapper->language($language)->field_variable_categories[$i]->label->set($value);

            // needed to share values between languages
            $wrapper->language($language)->field_variable_categories[$i]->name->set($category['name']);
            $wrapper->language($language)->field_variable_categories[$i]->missing->set($category['missing']);
          }
        }
        $i++;
      }
      $wrapper->save();
    }
    else {
      $variable = node_load(array_shift(array_keys($result['node'])));
      $wrapper = entity_metadata_wrapper('node', $variable);
    }

    $query = new EntityFieldQuery();
    $results = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'study_variable_attributes')
      ->fieldCondition('field_sva_variable', 'nid', $wrapper->nid->value())
      ->execute();

    if (!empty($results)) {
      foreach ($results['node'] as $result) {
        $sva = entity_metadata_wrapper('node', node_load($result->nid));
        if ($sva->field_sva_study->nid->value() == $harmonizations['study_nid']) {
          $sva->field_sva_script->set($harmonization['script']);
          $sva->field_sva_status->set($harmonization['status']);
          foreach ($harmonization['comment'] as $language => $value) {
            $sva->language($language)->field_sva_comment->set($value);
          }
          $sva->save();
        }
      }
    }
    $nb_created++;
  }

  return $nb_created;
}

/*
 * Implements hook_translation_exclude_fields()
 */
function mica_datasets_translation_exclude_fields() {
  return array(
    'study_variable_attributes' => array('field_sva_script', 'field_sva_status'),
  );
}

/**
 * Implements hook_views_data_alter().
 */
function mica_datasets_views_data_alter(&$data) {
  if (isset($data['search_api_index'])) {
    foreach (search_api_index_load_multiple(FALSE) as $index) {
      $data['search_api_index_' . $index->machine_name]['views_bulk_operations'] = array(
        'title' => t('Bulk operations'),
        'help' => t('Provide a checkbox to select the row for bulk operations.'),
        'real field' => 'id',
        'field' => array(
          'handler' => 'mica_datasets_handler_field_operations',
          'item_type' => $index->item_type,
          'click sortable' => FALSE,
        ),
      );
    }
  }
}

/**
 * Check whether queries/crosstab tab is accessible: requires to have access to dataset node and having participant variables
 * defined for this dataset.
 *
 * @param node   $dataset_node
 * @param string $op
 */
function _mica_datasets_node_queries_access($dataset_node, $op = 'update') {

  if (_mica_datasets_node_access($dataset_node, 'dataset', 'view')) {
    if (mica_dataset_dataset_variables($dataset_node->nid) && mica_connector_dataset_has_connectors($dataset_node->nid)) {
      if ($op === 'view') {
        return user_access('view any dataset query');
      }
      if ($op === 'update') {
        return user_access('create edit delete own dataset query');
      }
    }
  }
  return FALSE;
}

/**
 * Check whether crosstab tab is accessible in variable: requires to have access to dataset node and having participant variables
 * defined for this dataset.
 *
 * @param node   $dataset_node
 * @param string $op
 */
function _mica_datasets_node_crosstab_access($node, $op = 'update') {

  $n = node_load($node->nid);
  if (_mica_datasets_node_access($node, $n->type, 'view')) {
    $dataset_id = NULL;
    if ($n->type === 'variable'){
      $variable_wrapper = entity_metadata_wrapper('node', $node);
      $dataset_id = $variable_wrapper->field_dataset->nid->value();
    }
    else if ($n->type === 'dataset'){
      $dataset_id = $node->nid;
    }
    if (isset($dataset_id) && mica_dataset_dataset_variables($dataset_id) && mica_connector_dataset_has_connectors($dataset_id)) {
      if ($op === 'view') {
        return user_access('view any dataset query');
      }
      if ($op === 'update') {
        return user_access('create edit delete own dataset query');
      }
    }
  }
  return FALSE;
}

/**
 * Check for query accessibility: associated dataset is accessible, and query terms are all visible,
 * and user is the query author or query is published for viewing.
 *
 * @param node             $dataset_node
 * @param MicaDatasetQuery $query
 * @param string           $op
 */
function _mica_datasets_query_access($dataset_node, $query, $op = 'update') {
  global $user;

  // consistency check
  if ($dataset_node->nid != $query->dataset_id) {
    return FALSE;
  }

  if (!_mica_datasets_node_access($dataset_node, 'dataset', 'view')) {
    return FALSE;
  }

  // All variables associated to the query terms must be visible
  $terms = mica_query_term_query($query);
  if (isset($terms)) {
    foreach ($terms as $term) {
      if (node_access('view', node_load($term->variable_id)) == FALSE) {
        return FALSE;
      }
    }
  }

  // View query
  if ($op == 'view') {
    $view_perm = user_access('view any dataset query');
    if ($query->user_id == $user->uid) {
      return $view_perm;
    }
    else {
      return $view_perm && $query->published;
    }
  }

  // Edit/delete query
  if ($op == 'update') {
    $edit_perm = user_access('edit delete any dataset query');
    if ($query->user_id == $user->uid) {
      return user_access('create edit delete own dataset query') || ($edit_perm && $query->published);
    }
    else {
      return $edit_perm && $query->published;
    }
  }
  return FALSE;
}

/**
 * Check for query term access: associated query must be accessible.
 *
 * @param node                    $dataset_node
 * @param mica_dataset_query      $query
 * @param mica_dataset_query_term $query_term
 * @param string                  $op
 */
function _mica_datasets_query_term_access($dataset_node, $query, $query_term, $op = 'update') {
  if (!is_object($query_term)) {
    $query_term = mica_query_term_load($query_term);
  }
  if (!is_object($query)) {
    $query = mica_query_load($query);
  }

  // consistency check
  if (MicaDatasetQueryManager::isCached($query) == FALSE && $query->id != $query_term->query_id) {
    return FALSE;
  }

  return _mica_datasets_query_access($dataset_node, $query, $op);
}